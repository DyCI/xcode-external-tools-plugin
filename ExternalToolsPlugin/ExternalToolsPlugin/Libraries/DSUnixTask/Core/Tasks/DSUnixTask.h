//
//  DSUnixTaskLauncher.h
//  Demo
//
//  Created by Fabio Pelosin on 04/03/13.
//  Copyright (c) 2013 Discontinuity s.r.l. unipersonale. MIT License.
//

#import <Foundation/Foundation.h>

@class DSUnixTaskAbstractManager;
@protocol DSUnixTaskConnectionManagerTaskNotification;

/**
 Allows to execute an UNIX task via the XPC service. This class is an
 abstraction which works as a proxy of the task controlled in the service by
 the DSUnixTaskRunner class. For this reason this class collaborates with the
 DSUnixTaskConnectionManager to automatically handle the life cycle of the
 service.
 
 The XPC service controlling a task might be terminated by the system if the
 task is idle (waiting for input). In this case the task will be relaunched
 firing the launch hooks and will change process identifier. This behaviour is
 intended for task which are used to process data. Note that the task in this
 case would lose any state. While the service is being launched the input sent
 is being queed and sent as soon as the service confirms the launch. Therefore
 for the clients this behaviour is trasnparent with the caveat of state loss
 (if any).
 */
@interface DSUnixTask : NSObject

///-----------------------------------------------------------------------------
/// @name Initialization & Configuration
///-----------------------------------------------------------------------------

/**
 The connection manager to use.
 */
@property (nonatomic) DSUnixTaskAbstractManager *manager;

/**
 The designated initializer.

 @param connectionManager 
        The connection manager to use for running the task.
        Defaults to the +[DSUnixTaskXPCManager sharedManager]
        singleton.
 */
- (instancetype)initWithManager:(DSUnixTaskAbstractManager*)connectionManager;

/**
 Allows to specify the launch path and the arguments separated by white space.
 */
- (void)setCommand:(NSString *)command;

/**
 The launch path of the executable.
 */
@property NSString* launchPath;

/**
 The arguments to pass to the executable.
 */
@property NSArray* arguments;

/**
 The working directory of the executable.
 */
@property NSString* workingDirectory;

/**
 The environment to pass to the task.
 */
@property NSDictionary* environment;

/**
 The name of the task. If not provided defaults to the last component of the launch path.
 */
@property (nonatomic) NSString* name;

/**
 The encoding to use for the strings. Defaults to `NSUTF8StringEncoding`.
 */
@property NSStringEncoding stringEncoding;

/**
 The minimum accepted termination status. Defaults to 0.
 */
@property int minimumAcceptedTerminationStatus;

///-----------------------------------------------------------------------------
/// @name Launching the Task
///-----------------------------------------------------------------------------

/**
 Launches the task via the XPC service. A task can be launched only once.
 */
- (void)launch;

/**
 Whether the task was launched.
 */
@property (readonly) BOOL launched;

/**
 The process identifier if the launch was successful.
 */
@property (readonly) int processIdentifier;

/**
 Whether the task was terminated.
 */
@property (readonly) BOOL terminated;

/**
 The termination status available when a task terminates.
 */
@property (readonly) int terminationStatus;

/**
 The accumulated standard output of the task.
 */
@property (readonly) NSMutableString* standardOutput;

/**
 The accumulated standard error of the task.
 */
@property (readonly) NSMutableString* standardError;

/**
 Sends standard input to the task.
 */
- (void)writeStringToStandardInput:(NSString*)string;

/*
 All the strings which been sent to standard input but have been queued. Data to
 standard input is queued if the task hasn't yet received confirmation of being
 launched or the XPC process needs to be reinitiated.
 */
@property (readonly) NSMutableArray* standardInputQueue;

/**
 Sends the EOF (end of file) to standard input.
 */
- (void)sendEOFToStandardInput;

///-----------------------------------------------------------------------------
/// @name Handlers
///-----------------------------------------------------------------------------

/**
 Called when the task is correctly launched.

 @param launchHandler A block which receives one argument the task instance.
 */
@property (copy) void (^launchHandler)(DSUnixTask *taskLauncher);

/**
 Called when the task fails to launch. This might happen, for example, if the
 launch path is not executable or if it doesn't exits.

 @param launchHandler A block which receives the task instance and the failure
 reason extracted from the exception generated by the XPC service.
 */
@property (copy) void (^launchFailureHandler)(DSUnixTask *taskLauncher, NSString *failureReason);

/**
 Called when the task terminates with an acceptable status.

 @param launchHandler A block which receives one argument the task instance.
 */
@property (copy) void (^terminationHandler)(DSUnixTask *taskLauncher);

/**
 Called when the task terminates with a non acceptable status.

 @param launchHandler A block which receives one argument the task instance.
 */
@property (copy) void (^failureHandler)(DSUnixTask *taskLauncher);

/**
 Called when the task receives new standard output.

 @param launchHandler A block which receives the task instance and the new
        fragment of standard output.
 */
@property (copy) void (^standardOutputHandler)(DSUnixTask *taskLauncher, NSString *newOutput);

/**
 Called when the task receives new standard error.

 @param launchHandler A block which receives the task instance and the new
        fragment of standard error.
 */
@property (copy) void (^standardErrorHandler)(DSUnixTask *taskLauncher, NSString *newOutput);

///-----------------------------------------------------------------------------
/// @name Sub-classes hooks
///-----------------------------------------------------------------------------

/**
 Allows a subclass to modify the launch path.
 */
- (NSString *)effectiveLaunchPath;

/**
 Allows a subclass to modify the arguments.
 */
- (NSArray *)effectiveArguments;

/**
 Allows a subclass to modify the environment.
 */
- (NSDictionary *)effectiveEnvironment;

/**
 Allows a subclass to modify the working directory.
 */
- (NSString *)effectiveWorkingDirectory;

@end

